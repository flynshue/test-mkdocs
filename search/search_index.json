{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"test-mkdocs","text":"<p>PoC with squidfunk/mkdocs-material:9</p>"},{"location":"#building-docker-image","title":"Building Docker image","text":"<p>The default image specified in the official docs will run everything as root which is a terrible idea</p> <p>If you were to copy/paste command from the docs and run it, it would create <code>./docs/index.md</code> with the root user</p> <p>Note</p> <p>This docker image is meant to be run locally for development. i.e Don't run this in k8s</p> <p>Warning</p> <p>Don't run this as root, it's a bad idea</p> <pre><code>flynshue@flynshue-Latitude-7430:/tmp/faker-docs$ docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material:9 new .\nINFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\nflynshue@flynshue-Latitude-7430:/tmp/faker-docs$ ll\ntotal 40\ndrwxrwxr-x  3 flynshue flynshue  4096 Aug 28 14:07 ./\ndrwxrwxrwt 28 root     root     24576 Aug 28 14:07 ../\ndrwxr-xr-x  2 root     root      4096 Aug 28 14:07 docs/\n-rw-r--r--  1 root     root        19 Aug 28 14:07 mkdocs.yml\n</code></pre> <p>Instead of running as root, I created a Dockerfile that you can user to use during the build. For example,</p> <pre><code>$ docker build --build-arg user=$USER -t $USER/mkdocs-material:9 .\n\n[+] Building 0.2s (6/6) FINISHED                                                                                                                                                                                                         docker:default\n =&gt; [internal] load build definition from Dockerfile                                                                                                                                                                                               0.0s\n =&gt; =&gt; transferring dockerfile: 110B                                                                                                                                                                                                               0.0s\n =&gt; [internal] load metadata for docker.io/squidfunk/mkdocs-material:9                                                                                                                                                                             0.0s\n =&gt; [internal] load .dockerignore                                                                                                                                                                                                                  0.0s\n =&gt; =&gt; transferring context: 2B                                                                                                                                                                                                                    0.0s\n =&gt; [1/2] FROM docker.io/squidfunk/mkdocs-material:9                                                                                                                                                                                               0.0s\n =&gt; CACHED [2/2] RUN adduser -D flynshue                                                                                                                                                                                                           0.0s\n =&gt; exporting to image                                                                                                                                                                                                                             0.0s\n =&gt; =&gt; exporting layers                                                                                                                                                                                                                            0.0s\n =&gt; =&gt; writing image sha256:b823e9f635c994811b5be4bccdd7cdd6ab4f55926c027021c751c769e6fc0bc6                                                                                                                                                       0.0s\n =&gt; =&gt; naming to docker.io/flynshue/mkdocs-material:9\n</code></pre>"},{"location":"#bootstrapping-mkdocs","title":"Bootstrapping mkdocs","text":"<p>Once you have built your docker image, you can now run</p> <pre><code>$ docker run --rm -it -v $PWD:/docs $USER/mkdocs-material:9 new .\n\nINFO    -  Writing config file: ./mkdocs.yml\nINFO    -  Writing initial docs: ./docs/index.md\n</code></pre>"},{"location":"#preview-your-site","title":"Preview your site","text":"<pre><code>$ docker run --rm -it -v $PWD:/docs -p 8000:8000 $USER/mkdocs-material:9\n\n...\nINFO    -  [18:23:19] Reloading browsers\nINFO    -  [18:23:39] Browser connected: http://0.0.0.0:8000/flynshue/fakeproject/\nINFO    -  [18:23:42] Browser connected: http://0.0.0.0:8000/flynshue/fakeproject/blog/\nINFO    -  [18:23:43] Browser connected: http://0.0.0.0:8000/flynshue/fakeproject/\nINFO    -  [18:23:44] Browser connected: http://0.0.0.0:8000/flynshue/fakeproject/blog/\nINFO    -  [18:23:46] Browser connected: http://0.0.0.0:8000/flynshue/fakeproject/\n</code></pre> <p>You can then open your site in web browser at port 8000</p>"},{"location":"#publishing-to-gha","title":"Publishing to GHA","text":"<p>First you'll need to go to your github repo's settings &gt; pages</p> <p>Set the github pages to source to Build from a branch</p> <p>Set the branch to gh-pages and folder to /root</p> <p>You'll need to add GHA workflow to that will run <code>mkdocs</code> to build your site</p> <p>You can use the GHA workflow from mkdocs-material as a starting point</p> <p>Note you'll need to make sure that GHA workflow includes <code>pip install mkdocs-&lt;pluginName&gt;</code> for any additional plugins you need.</p> <p>After you push to <code>main</code> branch that will kick off the GHA workflow to deploy your github pages</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/08/28/oc-ctx/","title":"oc-ctx","text":"<p>Introducing <code>oc-ctx</code> an OpenShift CLI plugin to help us log into our OCP 4 clusters</p> <p>Note</p> <p>You must install oc CLI &gt;= 4.14 prior to using <code>oc-ctx</code></p>"},{"location":"blog/2024/08/28/oc-ctx/#more-filler-content","title":"More filler content","text":"<p>Bacon ipsum dolor amet doner hamburger short ribs ham kevin boudin fatback picanha leberkas pork belly. Fatback swine salami ham filet mignon prosciutto brisket pig ground round shankle meatball capicola strip steak. Frankfurter pork loin beef, swine ribeye doner beef ribs salami turkey. Tri-tip pork loin pastrami burgdoggen pork chop kevin t-bone pork belly strip steak doner. Shankle pork chop tongue cow, brisket drumstick meatball.</p>"},{"location":"blog/2024/08/28/post-2/","title":"Post 2","text":"<p>Bacon ipsum dolor amet doner hamburger short ribs ham kevin boudin fatback picanha leberkas pork belly. Fatback swine salami ham filet mignon prosciutto brisket pig ground round shankle meatball capicola strip steak. Frankfurter pork loin beef, swine ribeye doner beef ribs salami turkey. Tri-tip pork loin pastrami burgdoggen pork chop kevin t-bone pork belly strip steak doner. Shankle pork chop tongue cow, brisket drumstick meatball.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}